prog_el_s(progEls P) ::= prog_el(P)
prog_el_s(progEls P cut_root(Ps)) ::= prog_el(P) prog_el_s(Ps)

prog_el(V) ::= var_decl(V)
prog_el(D) ::= definition(D)

var_decl(varDecl V) ::= var var_of_type(V)
var_decl(varDecl V) ::= vars var_s_of_type_s(V)

type(typ S) ::= set_term(S)

definition(C) ::= c_def(C)
definition(F) ::= f_def(F)
definition(R) ::= r_def(R)

c_def(cDef C D) ::= const_(C) colonEq def_body(D)
c_def(cDef C D B) ::= const_(C) colonEq def_body(D) where bool_term(B)

f_def(fDef F D) ::= function(F) colonEq def_body(D)
f_def(fDef F D B) ::= function(F) colonEq def_body(D) where bool_term(B)

def_body(T) ::= term(T)
def_body(T) ::= term_if_bool_term_s(T)

r_def(rDef R B) ::= relation(R) iff bool_term(B)
r_def(rDef R B B2) ::= relation(R) iff bool_term(B) where bool_term(B2)

term(U) ::= user_term(U)
term(T) ::= lPar term(T) rPar
term(A) ::= atom_term(A)
term(S) ::= string_term(S)
term(T) ::= tuple_term(T)
term(T) ::= tuple_indexed_term(T)
term(L) ::= lambda_term(L)
term(S) ::= set_term(S)
term(B) ::= bool_term(B)
term(A) ::= ar_term(A)

atom_term(atomT A1) ::= atom_term_1(A1)

atom_term_1(atomUT U) ::= user_term(U)
atom_term_1(A) ::= atom(A)

string_term(strT S1) ::= string_term_1(S1)

string_term_1(strUT U) ::= user_term(U)
string_term_1(S) ::= str(S)

tuple_term(tupT T1) ::= tuple_term_1(T1)

tuple_term_1(tupUT U) ::= user_term(U)
tuple_term_1(tup T) ::= lPar term_s(T) rPar

tuple_indexed_term(tupIndT T1) ::= tuple_indexed_term_1(T1)

tuple_indexed_term_1(tupIndUT U) ::= user_term(U)
tuple_indexed_term_1(tupInd T A) ::= tuple_term(T) lBracket ar_term(A) rBracket

set_term(setT S1) ::= set_term_1(S1)

set_term_1(S2) ::= set_term_2(S2)
set_term_1(union S1 S2) ::= set_term_1(S1) U set_term_2(S2)
set_term_1(setDiff S1 S2) ::= set_term_1(S1) backslash set_term_2(S2)

set_term_2(S3) ::= set_term_3(S3)
set_term_2(nrsec S2 S3) ::= set_term_2(S2) sec set_term_3(S3)
set_term_2(cross S2 S3) ::= set_term_2(S2) star set_term_3(S3)

set_term_3(S4) ::= set_term_4(S4)
set_term_3(aggrUnion B S4) ::= U lBracket bool_term(B) rBracket set_term_4(S4)
set_term_3(aggrNrsec B S4) ::= Sec lBracket bool_term(B) rBracket set_term_4(S4)

set_term_4(setUT U) ::= user_term(U)
set_term_4(S) ::= lPar set_term(S) rPar
set_term_4(powSet S) ::= pow lPar set_term(S) rPar
set_term_4(S) ::= sequence(S)
set_term_4(B) ::= brace_set(B)

sequence(seq) ::= lArrow rArrow
sequence(seq T) ::= lArrow term_s(T) rArrow

brace_set(set) ::= lBrace rBrace
brace_set(set T) ::= lBrace term_s(T) rBrace
brace_set(nrval A A2) ::= lBrace ar_term(A) twoDot ar_term(A2) rBrace
brace_set(setCompr T B) ::= lBrace term(T) bar bool_term(B) rBrace

lambda_term(lmbdT L1) ::= lambda_term_1(L1)

lambda_term_1(lmbdUT U) ::= user_term(U)
lambda_term_1(lmbd V T) ::= lam var_s(V) dot term(T)

bool_term(boolT B1) ::= bool_term_1(B1)

bool_term_1(B2) ::= bool_term_2(B2)
bool_term_1(equiv B2 B1) ::= bool_term_2(B2) equivalent bool_term_1(B1)

bool_term_2(B3) ::= bool_term_3(B3)
bool_term_2(impl B3 B2) ::= bool_term_3(B3) implies bool_term_2(B2)

bool_term_3(B4) ::= bool_term_4(B4)
bool_term_3(disj B3 B4) ::= bool_term_3(B3) or bool_term_4(B4)

bool_term_4(B5) ::= bool_term_5(B5)
bool_term_4(conj B4 B5) ::= bool_term_4(B4) amperstand bool_term_5(B5)

bool_term_5(B6) ::= bool_term_6(B6)
bool_term_5(not B6) ::= tilde bool_term_6(B6)

bool_term_6(boolUT U) ::= user_term(U)
bool_term_6(B) ::= lPar bool_term(B) rPar
bool_term_6(T) ::= truth(T)
bool_term_6(S) ::= set_bool_term(S)
bool_term_6(Q) ::= quantified_term(Q)
bool_term_6(E) ::= equality(E)

set_bool_term(setMem T S) ::= term(T) in set_term(S)
set_bool_term(subset S S2) ::= set_term(S) sub set_term(S2)

quantified_term(exist V B) ::= some var_s_in_set_term(V) dot bool_term_6(B)
quantified_term(univ V B) ::= all var_s_in_set_term(V) dot bool_term_6(B)

equality(R) ::= relational(R)
equality(eq T T2) ::= term(T) equal term(T2)
equality(uneq T T2) ::= term(T) unequal term(T2)

relational(less A A2) ::= ar_term(A) lArrow ar_term(A2)
relational(greater A A2) ::= ar_term(A) rArrow ar_term(A2)
relational(lessEq A A2) ::= ar_term(A) lessOrEq ar_term(A2)
relational(greaterEq A A2) ::= ar_term(A) greaterOrEq ar_term(A2)

ar_term(arT A1) ::= ar_term_1(A1)

ar_term_1(A2) ::= ar_term_2(A2)
ar_term_1(add A1 A2) ::= ar_term_1(A1) plus ar_term_2(A2)
ar_term_1(biMinus A1 A2) ::= ar_term_1(A1) minus ar_term_2(A2)

ar_term_2(A3) ::= ar_term_3(A3)
ar_term_2(mult A2 A3) ::= ar_term_2(A2) star ar_term_3(A3)
ar_term_2(div A2 A3) ::= ar_term_2(A2) slash ar_term_3(A3)
ar_term_2(md A2 A3) ::= ar_term_2(A2) mod ar_term_3(A3)

ar_term_3(A4) ::= ar_term_4(A4)
ar_term_3(A4) ::= plus ar_term_4(A4)
ar_term_3(uMinus A4) ::= minus ar_term_4(A4)
ar_term_3(sum B A4) ::= Sum lBracket bool_term(B) rBracket ar_term_4(A4)
ar_term_3(prod B A4) ::= Prod lBracket bool_term(B) rBracket ar_term_4(A4)

ar_term_4(A5) ::= ar_term_5(A5)
ar_term_4(exp A5 A4) ::= ar_term_5(A5) hat ar_term_4(A4)

ar_term_5(arUT U) ::= user_term(U)
ar_term_5(A) ::= lPar ar_term(A) rPar
ar_term_5(flr A) ::= floor lPar ar_term(A) rPar
ar_term_5(clng A) ::= ceil lPar ar_term(A) rPar
ar_term_5(N) ::= num(N)
ar_term_5(barT B) ::= bar bar_arg(B) bar

bar_arg(barUT U) ::= user_term(U)
bar_arg(S) ::= set_term(S)
bar_arg(A) ::= ar_term(A)

term_s(terms T) ::= term(T)
term_s(terms T cut_root(Ts)) ::= term(T) comma term_s(Ts)

var_s(vars V) ::= var_(V)
var_s(vars V cut_root(Vs)) ::= var_(V) comma var_s(Vs)

var_s_in_set_term(varsInS V S) ::= var_s(V) in set_term(S)

var_of_type(varOfT V T) ::= var_(V) colon type(T)

var_s_of_type(varsOfT V T) ::= var_s(V) colon type(T)

var_s_of_type_s(varsOfTs V) ::= var_s_of_type(V)
var_s_of_type_s(varsOfTs V cut_root(Vs)) ::= var_s_of_type(V) comma var_s_of_type_s(Vs)

term_if_bool_term(tIfBT T B) ::= term(T) if bool_term(B)
term_if_bool_term(tElse T) ::= term(T) otherwise

term_if_bool_term_s(tIfBTs T) ::= term_if_bool_term(T)
term_if_bool_term_s(tIfBTs T cut_root(Ts)) ::= term_if_bool_term(T) semicolon term_if_bool_term_s(Ts)

user_term(userVC I) ::= id(I)
user_term(userFR I T) ::= id(I) lPar term_s(T) rPar

var_(vName I) ::= id(I)
const_(cName I) ::= id(I)
fun_(fName I) ::= id(I)
rel_(rName I) ::= id(I)

function(fun F V) ::= fun_(F) lPar var_s(V) rPar
relation(rel R V) ::= rel_(R) lPar var_s(V) rPar
