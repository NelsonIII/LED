prog_el_s(progEls P) ::= prog_el(P)
prog_el_s(progEls P cut_root(Ps)) ::= prog_el(P) prog_el_s(Ps)

prog_el(V) ::= var_decl(V)
prog_el(D) ::= def_(D)

var_decl(varDecl V) ::= var var_of_type(V)
var_decl(varDecl V) ::= vars var_s_of_type_s(V)

type(typ S) ::= set_term(S)

def_(C) ::= const_def(C)
def_(F) ::= fun_def(F)
def_(R) ::= rel_def(R)

const_def(constDef C D) ::= const_(C) colonEq def_body(D)
const_def(constDef C D B) ::= const_(C) colonEq def_body(D) where bool_term(B)

fun_def(funDef F D) ::= fun_term(F) colonEq def_body(D)
fun_def(funDef F D B) ::= fun_term(F) colonEq def_body(D) where bool_term(B)

rel_def(relDef R B) ::= rel_term(R) iff bool_term(B)
rel_def(relDef R B B2) ::= rel_term(R) iff bool_term(B) where bool_term(B2)

def_body(T) ::= term(T)
def_body(T) ::= term_if_bool_term_s(T)

term(U) ::= user_term(U)
term(T) ::= lParenth term(T) rParenth
term(A) ::= atom_term(A)
term(S) ::= string_term(S)
term(T) ::= tuple_term(T)
term(T) ::= tuple_indexed_term(T)
term(L) ::= lambda_term(L)
term(S) ::= set_term(S)
term(B) ::= bool_term(B)
term(A) ::= ar_term(A)

atom_term(atomT A1) ::= atom_term_1(A1)

atom_term_1(atomUT U) ::= user_term(U)
atom_term_1(A) ::= atom(A)

string_term(strT S1) ::= string_term_1(S1)

string_term_1(strUT U) ::= user_term(U)
string_term_1(S) ::= string(S)

tuple_term(tupT T1) ::= tuple_term_1(T1)

tuple_term_1(tupUT U) ::= user_term(U)
tuple_term_1(tup T) ::= lParenth term_s(T) rParenth
tuple_term_1(T) ::= tuple_indexed_term(T)

tuple_indexed_term(tupIndT T1) ::= tuple_indexed_term_1(T1)

tuple_indexed_term_1(tupIndUT U) ::= user_term(U)
tuple_indexed_term_1(tupInd T A) ::= tuple_term(T) lBracket ar_term(A) rBracket

set_term(setT S1) ::= set_term_1(S1)

set_term_1(S2) ::= set_term_2(S2)
set_term_1(unn S1 S2) ::= set_term_1(S1) U set_term_2(S2)
set_term_1(diff S1 S2) ::= set_term_1(S1) backslash set_term_2(S2)

set_term_2(S3) ::= set_term_3(S3)
set_term_2(nrsec S2 S3) ::= set_term_2(S2) sec set_term_3(S3)
set_term_2(cross S2 S3) ::= set_term_2(S2) star set_term_3(S3)

set_term_3(S4) ::= set_term_4(S4)
set_term_3(aggrUnn B S4) ::= U lBracket bool_term(B) rBracket set_term_4(S4)
set_term_3(aggrNrsec B S4) ::= Sec lBracket bool_term(B) rBracket set_term_4(S4)

set_term_4(setUT U) ::= user_term(U)
set_term_4(S) ::= lParenth set_term(S) rParenth
set_term_4(powSet S) ::= Pow lParenth set_term(S) rParenth
set_term_4(S) ::= sequence(S)
set_term_4(B) ::= brace_set(B)

sequence(seq) ::= lArrow rArrow
sequence(seq T) ::= lArrow term_s(T) rArrow

brace_set(set) ::= lBrace rBrace
brace_set(set T) ::= lBrace term_s(T) rBrace
brace_set(nrval A A2) ::= lBrace ar_term(A) twoDots ar_term(A2) rBrace
brace_set(setCompr T B) ::= lBrace term(T) pipe bool_term(B) rBrace

lambda_term(lmbdT L1) ::= lambda_term_1(L1)

lambda_term_1(lmbdUT U) ::= user_term(U)
lambda_term_1(lmbd S T) ::= lam symbol_s(S) dot term(T)

bool_term(boolT B1) ::= bool_term_1(B1)

bool_term_1(B2) ::= bool_term_2(B2)
bool_term_1(equiv B2 B1) ::= bool_term_2(B2) equivalent bool_term_1(B1)

bool_term_2(B3) ::= bool_term_3(B3)
bool_term_2(impl B3 B2) ::= bool_term_3(B3) implies bool_term_2(B2)

bool_term_3(B4) ::= bool_term_4(B4)
bool_term_3(disj B3 B4) ::= bool_term_3(B3) or bool_term_4(B4)

bool_term_4(B5) ::= bool_term_5(B5)
bool_term_4(conj B4 B5) ::= bool_term_4(B4) amperstand bool_term_5(B5)

bool_term_5(B6) ::= bool_term_6(B6)
bool_term_5(neg B6) ::= tilde bool_term_6(B6)

bool_term_6(boolUT U) ::= user_term(U)
bool_term_6(B) ::= lParenth bool_term(B) rParenth
bool_term_6(T) ::= truth(T)
bool_term_6(Q) ::= quantified_term(Q)
bool_term_6(S) ::= set_bool_term(S)
bool_term_6(E) ::= equality(E)

quantified_term(exist S B) ::= some symbol_s_in_set_term(S) dot bool_term_6(B)
quantified_term(univ S B) ::= all symbol_s_in_set_term(S) dot bool_term_6(B)

set_bool_term(setMem T S) ::= term(T) in set_term(S)
set_bool_term(sbset S S2) ::= set_term(S) sub set_term(S2)

equality(R) ::= relational(R)
equality(eq T T2) ::= term(T) equal term(T2)
equality(uneq T T2) ::= term(T) unequal term(T2)

relational(less A A2) ::= ar_term(A) lArrow ar_term(A2)
relational(greater A A2) ::= ar_term(A) rArrow ar_term(A2)
relational(lessEq A A2) ::= ar_term(A) lessOrEq ar_term(A2)
relational(greaterEq A A2) ::= ar_term(A) greaterOrEq ar_term(A2)

ar_term(arT A1) ::= ar_term_1(A1)

ar_term_1(A2) ::= ar_term_2(A2)
ar_term_1(add A1 A2) ::= ar_term_1(A1) plus ar_term_2(A2)
ar_term_1(bMns A1 A2) ::= ar_term_1(A1) minus ar_term_2(A2)

ar_term_2(A3) ::= ar_term_3(A3)
ar_term_2(mult A2 A3) ::= ar_term_2(A2) star ar_term_3(A3)
ar_term_2(div A2 A3) ::= ar_term_2(A2) slash ar_term_3(A3)
ar_term_2(md A2 A3) ::= ar_term_2(A2) mod ar_term_3(A3)

ar_term_3(A4) ::= ar_term_4(A4)
ar_term_3(A4) ::= plus ar_term_4(A4)
ar_term_3(uMns A4) ::= minus ar_term_4(A4)
ar_term_3(sum B A4) ::= Sum lBracket bool_term(B) rBracket ar_term_4(A4)
ar_term_3(prod B A4) ::= Prod lBracket bool_term(B) rBracket ar_term_4(A4)

ar_term_4(A5) ::= ar_term_5(A5)
ar_term_4(exp A5 A4) ::= ar_term_5(A5) hat ar_term_4(A4)

ar_term_5(arUT U) ::= user_term(U)
ar_term_5(A) ::= lParenth ar_term(A) rParenth
ar_term_5(flr A) ::= floor lParenth ar_term(A) rParenth
ar_term_5(clng A) ::= ceil lParenth ar_term(A) rParenth
ar_term_5(N) ::= numl(N)
ar_term_5(pip P) ::= pipe pipe_arg(P) pipe

pipe_arg(pipeUT U) ::= user_term(U)
pipe_arg(S) ::= set_term(S)
pipe_arg(A) ::= ar_term(A)

term_s(terms T) ::= term(T)
term_s(terms T cut_root(Ts)) ::= term(T) comma term_s(Ts)

symbol_s(syms S) ::= symbol_(S)
symbol_s(syms S cut_root(Ss)) ::= symbol_(S) comma symbol_s(Ss)

symbol_s_in_set_term(symsInS S S2) ::= symbol_s(S) in set_term(S2)

var_s(vars V) ::= var_(V)
var_s(vars V cut_root(Vs)) ::= var_(V) comma var_s(Vs)

var_of_type(varOfT V T) ::= var_(V) colon type(T)

var_s_of_type(varsOfT V T) ::= var_s(V) colon type(T)

var_s_of_type_s(varsOfTs V) ::= var_s_of_type(V)
var_s_of_type_s(varsOfTs V cut_root(Vs)) ::= var_s_of_type(V) comma var_s_of_type_s(Vs)

term_if_bool_term(tIfBT T B) ::= term(T) if bool_term(B)
term_if_bool_term(tElse T) ::= term(T) otherwise

term_if_bool_term_s(tIfBTs T) ::= term_if_bool_term(T)
term_if_bool_term_s(tIfBTs T cut_root(Ts)) ::= term_if_bool_term(T) semicolon term_if_bool_term_s(Ts)

fun_term(funT F V) ::= fun_(F) lParenth symbol_s(V) rParenth
rel_term(relT R V) ::= rel_(R) lParenth symbol_s(V) rParenth

symbol_(symN I) ::= id(I)

var_(varN I) ::= id(I)
const_(constN I) ::= id(I)

fun_(funN I) ::= id(I)
rel_(relN I) ::= id(I)

user_term(userSVC I) ::= id(I)
user_term(userFR I T) ::= id(I) lParenth term_s(T) rParenth
